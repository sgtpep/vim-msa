#!/bin/sh -eu
# The VIM-based multiple sequence alignment (MSA) editor.
# The project is released under the General Public License (GPL), version 3.
# Copyright © 2018, Danil Semelenov, Stas Malavin.
path=${TMPDIR-/tmp}/${0##*/}
cat > "$path".vim << \EOF
function s:append_line(line)
  call setline(s:buffer_empty() ? 1 : line('$') + 1, a:line)
endfunction

function s:buffer_empty()
  return line('$') == 1 && getline(1) == ''
endfunction

function s:configure_comment(number)
  autocmd BufUnload <buffer> syncbind | call win_gotoid(1000) | call winrestview(b:view)
  autocmd BufWinLeave <buffer> call s:update_status('')
  call s:update_status('Comment')
  execute printf('autocmd BufWriteCmd <buffer> call s:write_comment(%d)', a:number)
  resize 3
  setlocal nobuflisted
  setlocal statusline=Comment
endfunction

function s:configure_names()
  setlocal nobuflisted
  setlocal nomodifiable
  setlocal nowrap
  setlocal scrollbind
  setlocal statusline=Names
  setlocal winfixwidth
  vertical resize 10
endfunction

function s:configure_sequences(type)
  autocmd BufWriteCmd <buffer> call s:write_file(&filetype, expand('<amatch>'))
  autocmd CursorMoved <buffer> call s:move_cursor(0)
  autocmd CursorMovedI <buffer> call s:move_cursor(1)
  autocmd TextChanged <buffer> call s:synchronize_names()
  execute join(map(map(range(char2nr('a'), char2nr('z')), {_, number -> nr2char(number)}), {_, character -> printf("inoremap <buffer> %s %s\nnoremap <buffer> f%s f%s", character, toupper(character), character, toupper(character))}), "\n")
  inoremap <buffer> <expr> <Del> getpos('.')[2] > stridx(getline('.'), '>') ? '' : '<Del>'
  inoremap <buffer> <CR> <Nop>
  inoremap <buffer> <Space> -
  inoremap <buffer> > <Nop>
  let &l:filetype = a:type
  nnoremap <buffer> <expr> <silent> C stridx(getline('.'), '>') == -1 ? 'C' : 'ct>'
  nnoremap <buffer> <expr> <silent> D stridx(getline('.'), '>') == -1 ? 'D' : 'dt>'
  nnoremap <buffer> <silent> O O<C-O>:call <SID>update_names()<CR>
  nnoremap <buffer> <silent> gc :call <SID>edit_comment(line('.'))<CR>
  nnoremap <buffer> <silent> o o<C-O>:call <SID>update_names()<CR>
  nnoremap <buffer> <silent> x :<C-U>execute printf('normal! %dx', stridx(getline('.'), '>') == -1 ? v:count1 : min([v:count1, stridx(getline('.'), '>') - getpos('.')[2] + 1]))<CR>
  setlocal backspace-=eol
  setlocal buftype=acwrite
  setlocal concealcursor=cinv
  setlocal conceallevel=3
  setlocal ignorecase
  setlocal nowrap
  setlocal scrollbind
  syntax match Comment />.*$/ conceal
endfunction

function s:configure_vim()
  highlight VertSplit NONE
  set fillchars+=vert:│
  set laststatus=0
endfunction

function s:edit_comment(number)
  let comment = join(split(getline(a:number), '>', 1)[1:], '>')
  let b:view = winsaveview()
  silent belowright split `=tempname()`
  call s:configure_comment(a:number)
  call setline(1, comment)
  call win_gotoid(1000)
  call winrestview(b:view)
  syncbind
  wincmd p
endfunction

function s:initialize_empty()
  call win_gotoid(1000)
  if !len(expand('%'))
    call s:configure_sequences('fasta')
  endif
endfunction

function s:main()
  autocmd BufReadCmd *.fa,*.faa,*.fas,*.fasta,*.ffn,*.fna,*.frn,*.fsa,*.fst,*.mafft,*.seq call s:read_file('fasta', expand('<amatch>'))
  autocmd VimEnter * call s:initialize_empty()
  call s:configure_vim()
  call s:split_windows()
endfunction

function s:move_cursor(offset)
  if mode() ==# 'v'
    let [start, end] = [getpos('v'), getpos('.')]
    let index = stridx(getline(start[1]), '>')
    let index = index == -1 ? len(getline(start[1])) : index
    if start[1] == end[1]
      if getpos('.')[2] > index
        let position = getcurpos()
        let position[2] -= 1
        call setpos('.', position)
      endif
    else
      let position = getcurpos()
      let [position[1], position[2]] = [start[1], start[1] > end[1] ? 1 : index]
      call setpos('.', position)
    endif
  else
    let index = stridx(getline('.'), '>')
    if index != -1
      let index += a:offset
      let position = getcurpos()
      if index != -1 && position[2] > index
        let position[2] = index
        call setpos('.', position)
      endif
    endif
  endif
endfunction

function s:original_path(path)
  return a:path ==# expand('%:p') ? expand('%') : a:path ==# expand('#:p') ? expand('#') : a:path
endfunction

function s:read_fasta(path)
  let prev_line = ''
  let s:build_line = {sequence, comment -> printf('%s>%s', toupper(substitute(sequence, '\*$', '', '')), comment)}
  for line in readfile(a:path)
    if line !~ '^\s*$'
      if line =~ '^[>;]'
        if line !~ '^;' || prev_line !~ '^[>;]'
          if exists('sequence')
            call s:append_line(s:build_line(sequence, comment))
          endif
          let comment = substitute(line, '^[>;]\s*', '', '')
          let sequence = ''
        endif
      else
        let sequence .= line
      endif
    endif
    let prev_line = line
  endfor
  if exists('sequence')
    call s:append_line(s:build_line(sequence, comment))
  endif
endfunction

function s:read_file(type, path)
  call win_gotoid(1000)
  let [undo_levels, &l:undolevels] = [&l:undolevels, -1]
  silent %delete _
  if filereadable(a:path)
    try
      execute printf('call s:read_%s(a:path)', a:type)
    catch
      let error = 1
    endtry
  endif
  let &l:undolevels = undo_levels
  call s:configure_sequences(a:type)
  call s:update_names()
  if exists('error') || len(filter(getline(1, '$'), {_, line -> stridx(line, '>') == -1})) && !s:buffer_empty()
    silent %delete _
    echomsg printf('Error reading "%s"', s:original_path(a:path))
  endif
endfunction

function s:split_windows()
  vnew
  call s:configure_names()
  autocmd VimEnter * call win_gotoid(1000)
  autocmd WinEnter * if !win_id2win(1000) || !win_id2win(1001) | quitall! | endif
endfunction

function s:synchronize_names()
  let [start, end] = [getpos("'["), getpos("']")]
  if start == end || start[1] != end[1] || start[1] == end[1] && start[2] == 1 && end[2] == len(getline(end[1]))
    call s:update_names()
  endif
endfunction

function s:update_comment(number, comment)
  call setline(a:number, printf('%s>%s', split(getline(a:number), '>', 1)[0], a:comment))
  call s:update_names()
  setlocal modified
endfunction

function s:update_names()
  let names = map(getline(1, '$'), {_, line -> split(join(split(line, '>', 1)[1:], '>'), '', 1)[0]})
  call win_gotoid(1001)
  setlocal modifiable
  call setline(1, names)
  silent! execute printf('%d,$delete _', len(names) + 1)
  setlocal nomodifiable
  wincmd p
endfunction

function s:update_status(status)
  call win_gotoid(1000)
  let &l:statusline = a:status
  wincmd p
endfunction

function s:write_comment(number)
  let comment = join(getline(1, '$'), ' ')
  close!
  call s:update_comment(a:number, comment)
endfunction

function s:write_fasta(path)
  for line in getline(1, '$')
    call writefile([printf('>%s', join(split(line, '>', 1)[1:], '>'))], a:path, 'a')
    let sequence = split(line, '>', 1)[0]
    let range = len(sequence) ? range(0, len(sequence) - 1, 70) : [0]
    for index in range
      call writefile([sequence[index:index + 70 - 1]], a:path, 'a')
    endfor
  endfor
endfunction

function s:write_file(type, path)
  call win_gotoid(1000)
  call writefile([], a:path)
  execute printf('call s:write_%s(a:path)', a:type)
  if a:path ==# expand('%:p')
    setlocal nomodified
  endif
  echomsg printf('"%s" written', s:original_path(a:path))
  if !len(expand('%'))
    silent execute printf('file %s', fnameescape(a:path))
  endif
endfunction

call s:main()
EOF
for command in vim nvim vim; do
  ! command -v "$command" > /dev/null || break
done
set -- "$command" --cmd 'execute printf("source %s.vim", fnameescape($path))' "$@"
if [ -t 0 ]; then
  path=$path exec "$@"
else
  cat > "$path".fasta
  path=$path "$@" "$path".fasta < /dev/tty > /dev/tty
  cat "$path".fasta
  rm "$path".fasta
fi
