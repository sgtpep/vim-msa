#!/bin/sh -eu
# The VIM-based multiple sequence alignment (MSA) editor.
# The project is released under the General Public License (GPL), version 3.
# Copyright © 2018, Danil Semelenov, Stas Malavin.
path=${TMPDIR-/tmp}/${0##*/}
cat > "$path".vim << \EOF
function s:comment_index(...)
  return strridx(a:0 ? a:1 : getline('.'), '>')
endfunction

function s:configure_comment(number)
  autocmd BufLeave <buffer> execute printf('%dwindo syncbind', win_id2win(1000))
  execute printf('autocmd BufWriteCmd <buffer> call s:update_comment(%d, join(getline(1, "$"), " "))', a:number)
  resize 3
  setlocal nobuflisted
  setlocal statusline=Comment
endfunction

function s:configure_comments()
  autocmd BufUnload <buffer> execute printf('%dwindo %d', win_id2win(1000), line('.'))
  autocmd BufWriteCmd <buffer> call s:update_comments(getline(1, '$'))
  setlocal nobuflisted
  setlocal nowrap
  setlocal scrollbind
  setlocal statusline=Comments
  setlocal winfixwidth
endfunction

function s:configure_names()
  setlocal nobuflisted
  setlocal nomodifiable
  setlocal nowrap
  setlocal scrollbind
  setlocal statusline=Names
  setlocal winfixwidth
  vertical resize 10
endfunction

function s:configure_sequences(type)
  autocmd BufWriteCmd <buffer> call s:write_file(&filetype, expand('<amatch>'))
  autocmd CursorMoved <buffer> call s:move_cursor(0)
  autocmd CursorMovedI <buffer> call s:move_cursor(1)
  autocmd FilterReadPre <buffer> execute printf('call writefile(s:read_%s(expand("<afile>")), expand("<afile>"))', &filetype)
  autocmd FilterWritePost <buffer> execute printf('call s:write_%s(expand("<afile>"), readfile(expand("<afile>")))', &filetype)
  autocmd TextChanged <buffer> call s:synchronize_names()
  call s:disable_mappings({'': ['r>'], 'i': ['<CR>', '>'], 'v': ['gU', 'gu']})
  execute join(map(['P', 'p'], {_, mapping -> printf('nnoremap <buffer> <silent> %s :<C-U>let column = getcurpos()[2] \| execute printf("normal! %%d%s%%d\|", v:count1, column) \| unlet column<CR>', mapping, mapping)}), "\n")
  execute join(map(map(range(char2nr('a'), char2nr('z')), {_, number -> nr2char(number)}), {_, character -> substitute(substitute("inoremap <buffer> {C} {c}\ninoremap <buffer> {c} {C}\nnoremap <buffer> f{c} f{C}\nnoremap <buffer> r{c} r{C}", '{c}', character, 'g'), '{C}', toupper(character), 'g')}), "\n")
  inoremap <buffer> <Space> -
  inoremap <buffer> <expr> <Del> getpos('.')[2] > <SID>comment_index() ? '' : '<Del>'
  let &l:filetype = a:type
  nnoremap <buffer> <expr> <silent> C <SID>comment_index() == -1 ? 'C' : 'ct>'
  nnoremap <buffer> <expr> <silent> D <SID>comment_index() == -1 ? 'D' : 'dt>'
  nnoremap <buffer> <silent> O O<C-O>:call <SID>update_names()<CR>
  nnoremap <buffer> <silent> gC :<C-U>call <SID>edit_comments()<CR>
  nnoremap <buffer> <silent> gc :<C-U>call <SID>edit_comment(line('.'))<CR>
  nnoremap <buffer> <silent> o o<C-O>:call <SID>update_names()<CR>
  nnoremap <buffer> <silent> x :<C-U>execute printf('normal! %dx', <SID>comment_index() == -1 ? v:count1 : min([v:count1, <SID>comment_index() - getpos('.')[2] + 1]))<CR>
  setlocal backspace-=eol
  setlocal buftype=acwrite
  setlocal concealcursor=cinv
  setlocal conceallevel=3
  setlocal ignorecase
  setlocal nostartofline
  setlocal nowrap
  setlocal scrollbind
  setlocal shelltemp
  syntax match Comment />.*$/ conceal
endfunction

function s:configure_vim()
  highlight VertSplit NONE
  set laststatus=0
  if &encoding == 'utf-8'
    set fillchars+=vert:│
  endif
endfunction

function s:disable_mappings(mappings)
  execute join(map(items(a:mappings), {_, item -> join(map(item[1], {_, sequence -> printf('%snoremap <buffer> %s <Nop>', item[0], sequence)}), "\n")}), "\n")
endfunction

function s:edit_comment(number)
  let comment = s:extract_comment(getline(a:number))
  let view = winsaveview()
  silent topleft split `=tempname()`
  call s:configure_comment(a:number)
  call setline(1, comment)
  let id = s:select_window(1000)
  call winrestview(view)
  syncbind
  call win_gotoid(id)
endfunction

function s:edit_comments()
  let comments = map(getline(1, '$'), {_, line -> s:comment_index(line) == -1 ? '' : line[s:comment_index(line) + 1:]})
  let line = line('.')
  silent botright vsplit `=tempname()`
  call s:configure_comments()
  call setline(1, comments)
  execute line
  let id = s:select_window(1000)
  syncbind
  call win_gotoid(id)
endfunction

function s:extract_comment(line)
  return join(split(a:line, '>', 1)[1:], '>')
endfunction

function s:extract_sequence(line)
  return split(a:line, '>', 1)[0]
endfunction

function s:initialize_empty()
  call win_gotoid(1000)
  if !len(expand('%'))
    call s:configure_sequences('fasta')
  endif
endfunction

function s:main()
  autocmd BufRead * if expand('<amatch>:h') !=# fnamemodify(&helpfile, ':h') | echomsg 'Unknown format' | endif
  autocmd BufReadCmd *.fa,*.faa,*.fas,*.fasta,*.ffn,*.fna,*.frn,*.fsa,*.fst,*.mafft,*.seq call s:read_file('fasta', expand('<amatch>'))
  autocmd VimEnter * call s:initialize_empty()
  call s:configure_vim()
  call s:split_windows()
endfunction

function s:move_cursor(offset)
  if mode() ==# 'v'
    let [start, end] = [getpos('v'), getpos('.')]
    let index = s:comment_index(getline(start[1]))
    let index = index == -1 ? len(getline(start[1])) : index
    if start[1] == end[1]
      if getpos('.')[2] > index
        let position = getcurpos()
        let position[2] -= 1
        call setpos('.', position)
      endif
    else
      let position = getcurpos()
      let [position[1], position[2]] = [start[1], start[1] > end[1] ? 1 : index]
      call setpos('.', position)
    endif
  elseif mode() !=# 'V'
    let index = s:comment_index()
    if index != -1
      let index += a:offset
      let position = getcurpos()
      if index != -1 && position[2] > index
        let position[2] = index
        call setpos('.', position)
      endif
    endif
  endif
endfunction

function s:on_comment_update(id)
  call s:update_names()
  setlocal modified
  call win_gotoid(a:id)
  setlocal nomodified
endfunction

function s:original_path(path)
  return a:path ==# expand('%:p') ? expand('%') : a:path ==# expand('#:p') ? expand('#') : a:path
endfunction

function s:read_fasta(path)
  let lines = []
  let prev_line = ''
  let s:build_line = {sequence, comment -> printf('%s>%s', toupper(substitute(sequence, '\*$', '', '')), comment)}
  for line in readfile(a:path)
    if line !~ '^\s*$'
      if line =~ '^[>;]'
        if line !~ '^;' || prev_line !~ '^[>;]'
          if exists('sequence')
            call add(lines, s:build_line(sequence, comment))
          endif
          let comment = substitute(line, '^[>;]\s*', '', '')
          let sequence = ''
        endif
      else
        let sequence .= line
      endif
    endif
    let prev_line = line
  endfor
  if exists('sequence')
    call add(lines, s:build_line(sequence, comment))
  endif
  return lines
endfunction

function s:read_file(type, path)
  call win_gotoid(1000)
  if filereadable(a:path)
    try
      execute printf('let lines = s:read_%s(a:path)', a:type)
    catch
    endtry
  endif
  call s:configure_sequences(a:type)
  if exists('lines')
    let [undo_levels, &l:undolevels] = [&l:undolevels, -1]
    silent %delete _
    call setline(1, lines)
    let &l:undolevels = undo_levels
    call s:update_names()
  else
    echomsg printf('Error reading "%s"', s:original_path(a:path))
  endif
endfunction

function s:select_window(id)
  let id = win_getid()
  call win_gotoid(a:id)
  return id
endfunction

function s:split_windows()
  leftabove vnew
  call s:configure_names()
  autocmd VimEnter * call win_gotoid(1000)
  autocmd WinEnter * if !win_id2win(1000) || !win_id2win(1001) | quitall! | endif
endfunction

function s:synchronize_names()
  let [start, end] = [getpos("'["), getpos("']")]
  if start == end || start[1] != end[1] || start[1] == end[1] && start[2] == 1 && end[2] == len(getline(end[1]))
    call s:update_names()
  endif
endfunction

function s:update_comment(number, comment)
  let id = s:select_window(1000)
  call setline(a:number, printf('%s>%s', s:extract_sequence(getline(a:number)), a:comment))
  call s:on_comment_update(id)
endfunction

function s:update_comments(comments)
  let id = s:select_window(1000)
  call setline(1, map(getline(1, '$'), {index, line -> printf('%s>%s', s:extract_sequence(line), get(a:comments, index, ''))}))
  call s:on_comment_update(id)
endfunction

function s:update_names()
  let names = map(getline(1, '$'), {_, line -> split(s:extract_comment(line), '', 1)[0]})
  let id = s:select_window(1001)
  let view = winsaveview()
  setlocal modifiable
  call setline(1, names)
  silent! execute printf('%d,$delete _', len(names) + 1)
  setlocal nomodifiable
  call winrestview(view)
  call win_gotoid(id)
endfunction

function s:write_fasta(path, lines)
  call writefile([], a:path)
  for line in a:lines
    call writefile([printf('>%s', s:extract_comment(line))], a:path, 'Sa')
    let sequence = s:extract_sequence(line)
    let range = len(sequence) ? range(0, len(sequence) - 1, 70) : [0]
    for index in range
      call writefile([sequence[index:index + 70 - 1]], a:path, 'Sa')
    endfor
  endfor
endfunction

function s:write_file(type, path)
  call win_gotoid(1000)
  let path = printf('%s~', a:path)
  execute printf('call s:write_%s(path, getline(1, "$"))', a:type)
  call rename(path, a:path)
  if a:path ==# expand('%:p')
    setlocal nomodified
  endif
  echomsg printf('"%s" written', s:original_path(a:path))
  if !len(expand('%'))
    silent execute printf('file %s', fnameescape(a:path))
  endif
endfunction

call s:main()
EOF
for command in vim nvim vim; do
  ! command -v "$command" > /dev/null || break
done
set -- "$command" --cmd 'let path = printf("%s.vim", $path) | execute printf("source %s", fnameescape(path)) | call delete(path) | unlet path' "$@"
if [ -t 0 ]; then
  path=$path exec "$@"
else
  cat > "$path".fasta
  path=$path "$@" "$path".fasta < /dev/tty > /dev/tty
  cat "$path".fasta
  rm "$path".fasta
fi
