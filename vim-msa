#!/bin/sh -eu
# The VIM-based multiple sequence alignment (MSA) editor.
# The project is released under the General Public License (GPL), version 3.
# Copyright © 2018, Danil Semelenov, Stas Malavin.
path=${TMPDIR-/tmp}/${0##*/}
cat > "$path".vim << \EOF
function s:append_line(line)
  let number = line('$') == 1 && getline(1) == '' ? 1 : line('$') + 1
  call setline(number, a:line)
endfunction

function s:configure_comment(index)
  execute 'autocmd BufWriteCmd <buffer> call s:update_comment(' . a:index . ', join(getline(0, "$"), " ")) | close!'
  resize 3
  setlocal nobuflisted
  setlocal statusline=[Comment]
endfunction

function s:configure_comments()
  setlocal nobuflisted
  setlocal nomodifiable
  setlocal nowrap
  setlocal scrollbind
  setlocal statusline=[Comments]
  setlocal winfixwidth
  vertical resize 10
endfunction

function s:configure_sequences(type)
  autocmd TextChanged <buffer> call s:on_sequences_changed()
  execute 'autocmd BufWriteCmd <buffer> call s:write_file("' . a:type . '", expand("%"))'
  inoremap <buffer> <CR> <Nop>
  let &l:filetype = a:type
  nnoremap <buffer> <silent> gc :call <SID>edit_comment(line('.') - 1)<CR>
  setlocal backspace-=eol
  setlocal nowrap
  setlocal scrollbind
endfunction

function s:configure_vim()
  highlight VertSplit cterm=NONE gui=NONE term=NONE
  set fillchars+=vert:│
  set laststatus=0
endfunction

function s:edit_comment(index)
  let view = winsaveview()
  silent split `=tempname()`
  call s:configure_comment(a:index)
  call setline(1, s:comments[a:index])
  wincmd p
  call winrestview(view)
  wincmd p
endfunction

function s:main()
  autocmd BufReadCmd *.fa,*.faa,*.fas,*.fasta,*.ffn,*.fna,*.frn,*.fsa,*.seq call s:read_file('fasta', expand('%'))
  call s:configure_vim()
  call s:split_windows()
endfunction

function s:mark_modified()
  call win_gotoid(1000)
  setlocal modified
  wincmd p
endfunction

function s:on_sequences_changed()
  if line('$') != len(s:comments)
    silent undo
    echo ''
  endif
endfunction

function s:read_fasta(path)
  let comments = []
  let prev_line = ''
  for line in readfile(a:path)
    if line !~ '^\s*$'
      if line =~ '^[>;]'
        if line !~ '^;' || prev_line !~ '^[>;]'
          call add(comments, substitute(line, '^[>;]\s*', '', ''))
          if exists('sequence')
            call s:append_line(sequence)
          endif
          let sequence = ''
        endif
      else
        let sequence .= substitute(line, '\*$', '', '')
      endif
    endif
    let prev_line = line
  endfor
  if exists('sequence')
    call s:append_line(sequence)
  endif
  return comments
endfunction

function s:read_file(type, path)
  call win_gotoid(1000)
  let undo_levels = &undolevels
  setlocal undolevels=-1
  %delete _
  execute 'let comments = filereadable(a:path) ? s:read_' . a:type . '(a:path) : []'
  let &l:undolevels = undo_levels
  call s:configure_sequences(a:type)
  call s:update_comments(comments)
endfunction

function s:split_windows()
  vnew
  call s:configure_comments()
  autocmd VimEnter * call win_gotoid(1000)
  autocmd WinEnter * if !win_id2win(1000) || !win_id2win(1001) | quitall! | endif
endfunction

function s:update_comment(index, comment)
  let s:comments[a:index] = a:comment
  call s:update_comments(s:comments)
  call s:mark_modified()
endfunction

function s:update_comments(comments)
  let s:comments = a:comments
  call win_gotoid(1001)
  setlocal modifiable
  %delete _
  call setline(1, map(copy(a:comments), 'split(v:val, "", 1)[0]'))
  setlocal nomodifiable
  wincmd p
endfunction

function s:write_fasta(path)
  for index in range(0, len(s:comments) - 1)
    call writefile(['>' . s:comments[index]], expand('%'), 'a')
    let sequence = getline(index + 1)
    for index in range(0, len(sequence) - 1, 70)
      call writefile([sequence[index:index + 70 - 1]], a:path, 'a')
    endfor
  endfor
endfunction

function s:write_file(type, path)
  call writefile([], a:path)
  execute 'call s:write_' . a:type . '(a:path)'
  setlocal nomodified
  echomsg '"' . a:path . '" written'
endfunction

call s:main()
EOF
set -- --cmd "source $path.vim" "$@"
if [ -t 0 ]; then
  exec vim "$@"
else
  cat > "$path".fasta
  vim "$@" "$path".fasta < /dev/tty > /dev/tty
  cat "$path".fasta
  rm "$path".fasta
fi
